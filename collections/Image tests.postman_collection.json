{
	"info": {
		"_postman_id": "2c2ae921-7e9c-43b1-9900-ec7d15c116b7",
		"name": "Image tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18901686"
	},
	"item": [
		{
			"name": "Obtain Admin Authorization Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"postman.setGlobalVariable(\"auth_token\", data.token);\r",
							"tests[\"POST request doesn't fail\"] = responseCode.code === 201;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"admin\",\r\n    \"password\":\"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}/api/auth/login",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new artist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"postman.setGlobalVariable(\"artist_id\", data.id);\r",
							"tests[\"POST request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Pablo Picasso\",\r\n    \"birthplace\": \"Madrid, Spain\",\r\n    \"birthdate\": \"1881-10-25\",\r\n    \"image\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Pablo_picasso_1.jpg/200px-Pablo_picasso_1.jpg\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new artwork",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"postman.setGlobalVariable(\"artwork_id\", data.id);\r",
							"tests[\"POST request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"La Femme qui pleure\",\r\n    \"description\": \"The Weeping Woman, I is an elaboration of one of the central figures in Picassoâ€™s famous mural-size painting Guernica, executed some months earlier.\",\r\n    \"year\": 1837,\r\n    \"type\": \"Painting\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"postman.setGlobalVariable(\"image_id\", data.id);\r",
							"tests[\"POST request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Pablo_picasso_1.jpg/200px-Pablo_picasso_1.jpg\",\r\n    \"altText\": \"Pablo-Picassoo.jpg\",\r\n    \"height\": 300,\r\n    \"width\": 300\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/{{artwork_id}}/images",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						"{{artwork_id}}",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all images",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data= JSON.parse(responseBody);\r",
							"tests[\"GET request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/{{artwork_id}}/images",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						"{{artwork_id}}",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get one image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(responseBody);\r",
							"var data = JSON.parse(responseBody);\r",
							"tests[\"GET request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/{{artwork_id}}/images/{{image_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						"{{artwork_id}}",
						"images",
						"{{image_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a non-existent image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Entity with requested ID exists\"] = responseCode.code === 404; \r",
							"tests[\"Correct error message\"] = responseBody.has(\"The image with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/{{artwork_id}}/images/00000000-0000-0000-0000-000000000000",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						"{{artwork_id}}",
						"images",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(responseBody);\r",
							"var data = JSON.parse(responseBody);\r",
							"tests[\"PUT request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Pablo_picasso_1.jpg/200px-Pablo_picasso_1.jpg\",\r\n    \"altText\": \"Pablo-Picasso.jpg\",\r\n    \"height\": 300,\r\n    \"width\": 300\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/{{artwork_id}}/images/{{image_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						"{{artwork_id}}",
						"images",
						"{{image_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a non-existent image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Entity with requested ID exists\"] = responseCode.code === 404; \r",
							"tests[\"Correct error message\"] = responseBody.has(\"The image with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Pablo_picasso_1.jpg/200px-Pablo_picasso_1.jpg\",\r\n    \"altText\": \"Pablo-Picasso.jpg\",\r\n    \"height\": 300,\r\n    \"width\": 300\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/{{artwork_id}}/images/00000000-0000-0000-0000-000000000000",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						"{{artwork_id}}",
						"images",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"DELETE request doesn't fail\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/{{artwork_id}}/images/{{image_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						"{{artwork_id}}",
						"images",
						"{{image_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a non-existent image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Entity with requested ID exists\"] = responseCode.code === 404; \r",
							"tests[\"Correct error message\"] = responseBody.has(\"The image with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/{{artwork_id}}/images/00000000-0000-0000-0000-000000000000",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						"{{artwork_id}}",
						"images",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an artwork",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"DELETE request doesn't fail\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}/artworks/{{artwork_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}",
						"artworks",
						"{{artwork_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an artist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"DELETE request doesn't fail\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/artists/{{artist_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"artists",
						"{{artist_id}}"
					]
				}
			},
			"response": []
		}
	]
}